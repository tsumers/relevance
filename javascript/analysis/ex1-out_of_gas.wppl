//////// Setup: possible worlds, actions, and literal meanings ////////

var possibleWorlds =
    Categorical({
        ps:[.8, .1, .1],
        vs: ['does not exist', 'exists - closed', 'exists - open']
    })

var actions = ['gas', 'wait']

var utterances =  Infer({method: 'enumerate'}, function(){
    uniformDraw(['sorry', 'exists', 'exists - open', 'exists - closed'])
})

var literalMeanings = {

    // No information about the world.
    'sorry': function(world) { return world; },

    // Specify exact world state.
    'exists - open': function(world) { return world === 'exists - open'; },
    'exists - closed': function(world) { return world === 'exists - closed'; },

    // Ambiguous about world state.
    'exists': function(world) {
        return (world === 'exists - closed') || (world === 'exists - open');
    }
};

//////// Action rewards ////////

var reward = function(a, w) {

    // getting gas is great if it's open, bad otherwise
    if (a === 'gas') {
        if (w === 'exists - open') {return 1}
        return -1
    }

    // default of waiting is bad, but not *as* bad as making the trip for nothing.
    return -.5
}

var uttCost = function(utt) {

    if (utt === 'sorry') return .5
    if (utt === 'exists') return .5
    else return 1

}

//////// Literal Listeners ////////

var beliefListener = function(utt) {
    return Infer({method: 'enumerate'}, function(){

        // Sample from all worlds
        var world = sample(possibleWorlds)
        var meaning = literalMeanings[utt];
        condition(meaning(world));

        return world
    })
}

var actionListener = function(utt, alpha) {

    var beliefs = beliefListener(utt)
    return Infer({method: 'enumerate'}, function(){

        var actionChoice = uniformDraw(actions)
        factor(alpha * expectation(beliefs, function(world) {
            return reward(actionChoice, world)
        }))

        return actionChoice
    })
}

var truthFunc = function(utt, trueWorld){

    var worldLogProb = beliefListener(utt).score(trueWorld)

    // Use +1 / -1 epistemic utility
    return (worldLogProb === -Infinity) ? -1 : 1

}

//////// Speaker ////////

var speaker = function(trueWorld, lambda, alpha, includeUttCost){

    return Infer({method: 'enumerate'}, function(){

        var utt = sample(utterances)
        var actionUtility = expectation(actionListener(utt, alpha), function(a){
            return reward(a, trueWorld)
        });
        var truthUtility = truthFunc(utt, trueWorld)

        let uttUtility = lambda * actionUtility + (1-lambda)*truthUtility
        if (includeUttCost) {
            factor(alpha * (uttUtility - uttCost(utt)))
        } else{
            factor(alpha * uttUtility)
        }



        return utt
    })

}

//////// Pragmatic Listener ////////

var pragmaticListener = function(utt, lambda, alpha, includeUttCost){

    return Infer({method: 'enumerate'}, function(){

        var world = sample(possibleWorlds)
        // console.log(world, JSON.stringify(speaker(world, lambda, alpha)))
        var speakerUtt = sample(speaker(world, lambda, alpha, includeUttCost))
        condition(speakerUtt === utt)

        return world

    })

}


//////// Grid Search over parameters ////////
// See notebook: webppl-analysis.ipynb to launch this script
// Runs a search over parameters

var listenerWrapper = function(params){

    var results = pragmaticListener('exists', params.lambda, params.alpha, params.includeUttCost)
    return extend(params, {'results': results})

}

var gridSearchParams = function(){
    return Infer({method: 'enumerate'}, function(){
        return {
            // 'alpha': uniformDraw([10]),
            'alpha': uniformDraw(_.range(1, 11, 1)),
            'lambda': uniformDraw(_.range(0, 1.05, .1)),
            'includeUttCost': uniformDraw([true, false])
        }
    }).support()
}

/// Run parameter sweep for analysis
var gridResults = mapData({'data': gridSearchParams()}, listenerWrapper)
json.write('ex1-grid-results.json', gridResults);

// var ALPHA = 10
// console.log(JSON.stringify(beliefListener('sorry')))
// console.log(JSON.stringify(actionListener('sorry')))
// console.log(JSON.stringify(actionListener('exists')))

// console.log(JSON.stringify(speaker('exists - open', 0)))
// console.log(JSON.stringify(speaker('exists - open', .5)))
// console.log(JSON.stringify(speaker('exists - open', 1)))

// console.log(JSON.stringify(pragmaticListener('exists', 0))) // viz()
// console.log(JSON.stringify(pragmaticListener('exists', .5))) //viz()
