var ALPHA = 10

/// DECISION PROBLEM: possible worlds, actions, and
var possibleWorlds =
    Categorical({
        ps:[.8, .1, .1],
        vs: ['does not exist', 'exists - closed', 'exists - open']
    })

var actions = ['gas', 'wait']

/// R(a, w)
var reward = function(a, w) {

    // getting gas is great if it's open, bad otherwise
    if (a === 'gas') {
        if (w === 'exists - open') {return 1}
        return -1
    }

    // default of waiting is bad, but not *as* bad as making the trip for nothing.
    return -0.5
}

/// Utterances and p(w | u)
var utterances =  Infer({method: 'enumerate'}, function(){
    uniformDraw(['sorry', 'exists', 'exists - open', 'exists - closed'])
})

var literalMeanings = {

    // No information about the world.
    'sorry': function(world) { return world; },

    // Specify exact world state.
    'exists - open': function(world) { return world === 'exists - open'; },
    'exists - closed': function(world) { return world === 'exists - closed'; },

    // Ambiguous about world state.
    'exists': function(world) {
        return (world === 'exists - closed') || (world === 'exists - open');
    }
};

/// Assume longer utterances are more expensive.
var uttCost = function(utt){

    return 0

}

///fold:
var beliefListener = function(utt) {
    return Infer({method: 'enumerate'}, function(){

        // Sample from all worlds
        var world = sample(possibleWorlds)
        var meaning = literalMeanings[utt];
        condition(meaning(world));

        return world
    })
}

var actionListener = function(utt) {

    var beliefs = beliefListener(utt)
    return Infer({method: 'enumerate'}, function(){

        var actionChoice = uniformDraw(actions)
        factor(ALPHA * expectation(beliefs, function(world) {
            return reward(actionChoice, world)
        }))

        return actionChoice
    })
}

var truthFunc = function(utt, trueWorld){

    var worldLogProb = beliefListener(utt).score(trueWorld)

//     Use actual world uncertainty
//     return Math.max(worldLogProb, -5000)

    // Use +1 / -1 heuristic
    return (worldLogProb === -Infinity) ? -1 : 1

}

var speaker = function(trueWorld, lambda){

    return Infer({method: 'enumerate'}, function(){

        var utt = sample(utterances)
        var actionUtility = expectation(actionListener(utt), function(a){
            return reward(a, trueWorld)
        });
        var truthUtility = truthFunc(utt, trueWorld)

        var uttUtility = lambda * actionUtility + (1-lambda)*truthUtility - uttCost(utt)
        factor(ALPHA * uttUtility)

        return utt
    })

}
///

var pragmaticListener = function(utt, lambda){

    return Infer({method: 'enumerate'}, function(){

        var world = sample(possibleWorlds)
        console.log(world, JSON.stringify(speaker(world, lambda)))
        var speakerUtt = sample(speaker(world, lambda))
        condition(speakerUtt === utt)

        return world

    })

}



// console.log(JSON.stringify(beliefListener('sorry')))
// console.log(JSON.stringify(actionListener('sorry')))
// console.log(JSON.stringify(actionListener('exists')))

// console.log(JSON.stringify(speaker('exists - open', 0)))
// console.log(JSON.stringify(speaker('exists - open', .5)))
// console.log(JSON.stringify(speaker('exists - open', 1)))

console.log(JSON.stringify(pragmaticListener('exists', 0))) // viz()
console.log(JSON.stringify(pragmaticListener('exists', .5))) //viz()
